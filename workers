// 使用从 Cloudflare 控制面板中绑定的 KV 存储命名空间
const KV_NAMESPACE = GITHUB_HOSTS;  // 这里直接引用绑定的 KV 存储命名空间对象，而不是字符串

const GITHUB_URLS = [
    'github.com', 'raw.githubusercontent.com', 'alive.github.com', 'api.github.com', 'assets-cdn.github.com',
    'avatars.githubusercontent.com', 'avatars0.githubusercontent.com',
    'avatars1.githubusercontent.com', 'avatars2.githubusercontent.com',
    'avatars3.githubusercontent.com', 'avatars4.githubusercontent.com',
    'avatars5.githubusercontent.com', 'camo.githubusercontent.com',
    'central.github.com', 'cloud.githubusercontent.com', 'codeload.github.com',
    'collector.github.com', 'desktop.githubusercontent.com',
    'favicons.githubusercontent.com', 'gist.github.com',
    'github-cloud.s3.amazonaws.com', 'github-com.s3.amazonaws.com',
    'github-production-release-asset-2e65be.s3.amazonaws.com',
    'github-production-repository-file-5c1aeb.s3.amazonaws.com',
    'github-production-user-asset-6210df.s3.amazonaws.com', 'github.blog',
    'github.community', 'github.githubassets.com',
    'github.global.ssl.fastly.net', 'github.io', 'github.map.fastly.net',
    'githubstatus.com', 'live.github.com', 'media.githubusercontent.com',
    'objects.githubusercontent.com', 'pipelines.actions.githubusercontent.com',
    'user-images.githubusercontent.com',
    'vscode.dev', 'education.github.com', 'private-user-images.githubusercontent.com'
];

// 从网站解析 GitHub 域名的 IP 地址
const fetchIpList = async (url) => {
    const ipAddressApiUrl = `https://sites.ipaddress.com/${url}`;
    const response = await fetch(ipAddressApiUrl);
    const text = await response.text();
    const ipRegex = /\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b/g;
    const ipList = text.match(ipRegex);
    return ipList || [];
};

// 选择延迟最低的 IP 地址（示例简单算法）
const getBestIp = (ipList) => {
    if (ipList.length === 0) return null;
    return ipList[0];  // 假设选择第一个 IP 作为最佳 IP
};

// 更新 hosts 文件
const updateHostsFile = async (content) => {
    try {
        await KV_NAMESPACE.put('hosts', content);
    } catch (error) {
        console.error('Failed to update hosts file:', error);
    }
};

// 更新 JSON 文件
const updateJsonFile = async (contentList) => {
    try {
        await KV_NAMESPACE.put('hosts_json', JSON.stringify(contentList));
    } catch (error) {
        console.error('Failed to update JSON file:', error);
    }
};

// 创建 hosts 内容
const createHostsContent = (content, updateTime) => {
    return `# GitHub520 Host Start\n${content}\n# Update time: ${updateTime}\n# GitHub520 Host End\n`;
};

// 创建首页 HTML
const createHomePage = () => {
    return `
        <html>
        <head><title>GitHub Hosts</title></head>
        <body>
            <h1>GitHub Hosts File</h1>
            <p><a href="/hosts">View hosts</a></p>
            <p><a href="/hosts.json">View hosts.json</a></p>
        </body>
        </html>
    `;
};

// 处理请求
const handleRequest = async (request) => {
    const url = new URL(request.url);

    // 返回首页
    if (url.pathname === '/') {
        return new Response(createHomePage(), { status: 200, headers: { 'Content-Type': 'text/html' } });
    }

    // 返回 hosts 内容
    if (url.pathname === '/hosts') {
        const hosts = await KV_NAMESPACE.get('hosts');
        if (!hosts) {
            return new Response('Hosts file not found.', { status: 404 });
        }
        return new Response(hosts, { status: 200, headers: { 'Content-Type': 'text/plain' } });
    }

    // 返回 hosts.json 内容
    if (url.pathname === '/hosts.json') {
        const hostsJson = await KV_NAMESPACE.get('hosts_json');
        if (!hostsJson) {
            return new Response('hosts.json not found.', { status: 404 });
        }
        return new Response(hostsJson, { status: 200, headers: { 'Content-Type': 'application/json' } });
    }

    // 处理其他路径
    return new Response('Not found', { status: 404 });
};

// 监听 fetch 事件并触发处理请求
addEventListener('fetch', event => {
    event.respondWith(handleRequest(event.request));
});
